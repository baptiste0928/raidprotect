//! Cache client and server trait.
//!
//! This module expose the [`Cache`] trait used to access
//! the cache remotely with [`remoc::rtc`].

use raidprotect_model::{
    cache::{CachedChannel, CachedGuild, CachedRole},
    twilight::id::{
        marker::{ChannelMarker, GuildMarker, RoleMarker},
        Id,
    },
};
use remoc::rtc::{self, CallError};

/// Type returned by [`Cache`] methods.
pub type CacheResult<T> = Result<Option<T>, CallError>;

/// Cache server and client trait.
///
/// This trait contain methods to query the cache. Client and server
/// implementations are generated by [`remoc::rtc`].
///
/// The [`CacheClient`] type can be used to query the cache from
/// a remote client.
#[rtc::remote]
pub trait Cache {
    /// Get a [`CachedGuild`] by ID.
    async fn guild(&self, id: Id<GuildMarker>) -> CacheResult<CachedGuild>;

    /// Get a [`CachedChannel`] by ID.
    async fn channel(&self, id: Id<ChannelMarker>) -> CacheResult<CachedChannel>;

    /// Get all [`CachedChannel`] of a guild.
    async fn channels(&self, id: Id<GuildMarker>) -> CacheResult<Vec<CachedChannel>>;

    /// Get a [`CachedRole`] by ID.
    async fn role(&self, id: Id<RoleMarker>) -> CacheResult<CachedRole>;

    /// Get all [`CachedRole`] of a guild.
    async fn roles(&self, id: Id<GuildMarker>) -> CacheResult<Vec<CachedRole>>;
}
